#!/bin/bash

# DigitalOcean Deployment Script for Honey Shop
# This script deploys the application to a DigitalOcean droplet

set -e

# Colors for output
RED='\033[0;31m'
GREEN='\033[0;32m'
YELLOW='\033[1;33m'
NC='\033[0m' # No Color

# Configuration
DROPLET_IP="${DROPLET_IP:-}"
DROPLET_USER="${DROPLET_USER:-root}"
SSH_KEY_PATH="${SSH_KEY_PATH:-~/.ssh/id_rsa}"
PROJECT_NAME="honey-shop"

# Functions
log_info() {
    echo -e "${GREEN}[INFO]${NC} $1"
}

log_warn() {
    echo -e "${YELLOW}[WARN]${NC} $1"
}

log_error() {
    echo -e "${RED}[ERROR]${NC} $1"
}

check_requirements() {
    log_info "Checking requirements..."
    
    if ! command -v docker &> /dev/null; then
        log_error "Docker is not installed. Please install Docker first."
        exit 1
    fi
    
    if ! command -v docker-compose &> /dev/null; then
        log_error "Docker Compose is not installed. Please install Docker Compose first."
        exit 1
    fi
    
    if [ -z "$DROPLET_IP" ]; then
        log_error "DROPLET_IP environment variable is not set."
        log_info "Please set it: export DROPLET_IP=your_droplet_ip"
        exit 1
    fi
    
    if [ ! -f "$SSH_KEY_PATH" ]; then
        log_error "SSH key not found at $SSH_KEY_PATH"
        exit 1
    fi
    
    log_info "Requirements check passed!"
}

build_images() {
    log_info "Building Docker images..."
    
    # Build frontend
    log_info "Building frontend image..."
    docker build -t honey-shop-frontend:latest -f ../Dockerfile.frontend ..
    
    # Build backend
    log_info "Building backend image..."
    docker build -t honey-shop-backend:latest -f ../backend/Dockerfile ../backend
    
    log_info "Docker images built successfully!"
}

deploy_to_droplet() {
    log_info "Deploying to DigitalOcean droplet at $DROPLET_IP..."
    
    # Create deployment directory on droplet
    ssh -i "$SSH_KEY_PATH" -o StrictHostKeyChecking=no "$DROPLET_USER@$DROPLET_IP" << 'EOF'
        mkdir -p /opt/$PROJECT_NAME
        cd /opt/$PROJECT_NAME
EOF
    
    # Copy deployment files
    log_info "Copying deployment files..."
    scp -i "$SSH_KEY_PATH" -o StrictHostKeyChecking=no \
        docker-compose.prod.yml \
        "$DROPLET_USER@$DROPLET_IP:/opt/$PROJECT_NAME/docker-compose.yml"
    
    # Copy environment file if it exists
    if [ -f ".env" ]; then
        log_info "Copying environment file..."
        scp -i "$SSH_KEY_PATH" -o StrictHostKeyChecking=no \
            .env \
            "$DROPLET_USER@$DROPLET_IP:/opt/$PROJECT_NAME/"
    else
        log_warn "No .env file found. Please create one based on env.example"
    fi
    
    # Copy Docker images
    log_info "Saving and transferring Docker images..."
    docker save honey-shop-frontend:latest | gzip | ssh -i "$SSH_KEY_PATH" -o StrictHostKeyChecking=no "$DROPLET_USER@$DROPLET_IP" "gunzip | docker load"
    docker save honey-shop-backend:latest | gzip | ssh -i "$SSH_KEY_PATH" -o StrictHostKeyChecking=no "$DROPLET_USER@$DROPLET_IP" "gunzip | docker load"
    
    # Deploy on droplet
    log_info "Starting services on droplet..."
    ssh -i "$SSH_KEY_PATH" -o StrictHostKeyChecking=no "$DROPLET_USER@$DROPLET_IP" << 'EOF'
        cd /opt/$PROJECT_NAME
        
        # Stop existing services
        docker-compose down || true
        
        # Pull latest images (if using registry)
        docker-compose pull || true
        
        # Start services
        docker-compose up -d
        
        # Wait for services to be ready
        echo "Waiting for services to start..."
        sleep 30
        
        # Check service status
        docker-compose ps
EOF
    
    log_info "Deployment completed!"
}

setup_ssl() {
    log_info "Setting up SSL certificates..."
    
    ssh -i "$SSH_KEY_PATH" -o StrictHostKeyChecking=no "$DROPLET_USER@$DROPLET_IP" << 'EOF'
        cd /opt/$PROJECT_NAME
        
        # Create necessary directories
        mkdir -p traefik certificates
        
        # Set proper permissions
        chmod 600 traefik/acme.json || true
        
        # Restart Traefik to pick up new configuration
        docker-compose restart traefik
        
        echo "SSL setup completed. Certificates will be automatically generated by Let's Encrypt."
EOF
}

show_status() {
    log_info "Checking deployment status..."
    
    ssh -i "$SSH_KEY_PATH" -o StrictHostKeyChecking=no "$DROPLET_USER@$DROPLET_IP" << 'EOF'
        cd /opt/$PROJECT_NAME
        echo "=== Service Status ==="
        docker-compose ps
        
        echo -e "\n=== Service Logs (last 20 lines) ==="
        docker-compose logs --tail=20
        
        echo -e "\n=== Disk Usage ==="
        df -h
        
        echo -e "\n=== Memory Usage ==="
        free -h
EOF
}

# Main execution
main() {
    log_info "Starting DigitalOcean deployment for Honey Shop..."
    
    check_requirements
    build_images
    deploy_to_droplet
    setup_ssl
    show_status
    
    log_info "Deployment completed successfully!"
    log_info "Your application should be available at: http://$DROPLET_IP"
    log_info "Traefik dashboard: http://$DROPLET_IP:8080"
}

# Handle command line arguments
case "${1:-}" in
    "status")
        show_status
        ;;
    "logs")
        ssh -i "$SSH_KEY_PATH" -o StrictHostKeyChecking=no "$DROPLET_USER@$DROPLET_IP" "cd /opt/$PROJECT_NAME && docker-compose logs -f"
        ;;
    "restart")
        ssh -i "$SSH_KEY_PATH" -o StrictHostKeyChecking=no "$DROPLET_USER@$DROPLET_IP" "cd /opt/$PROJECT_NAME && docker-compose restart"
        ;;
    "stop")
        ssh -i "$SSH_KEY_PATH" -o StrictHostKeyChecking=no "$DROPLET_USER@$DROPLET_IP" "cd /opt/$PROJECT_NAME && docker-compose down"
        ;;
    *)
        main
        ;;
esac
