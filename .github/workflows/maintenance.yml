name: Scheduled Maintenance

on:
  schedule:
    # Run every day at 2 AM UTC
    - cron: '0 2 * * *'
  workflow_dispatch:
    inputs:
      task:
        description: 'Maintenance task to run'
        required: true
        default: 'all'
        type: choice
        options:
        - all
        - security-updates
        - backup
        - cleanup
        - health-check

jobs:
  security-updates:
    runs-on: ubuntu-latest
    if: github.event.inputs.task == 'all' || github.event.inputs.task == 'security-updates' || github.event_name == 'schedule'
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: '18'
          cache: 'npm'

      - name: Check for security updates
        run: |
          echo "Checking for security updates..."
          npm audit --audit-level moderate || echo "Security vulnerabilities found"
          cd backend && npm audit --audit-level moderate || echo "Backend security vulnerabilities found"

      - name: Update dependencies
        run: |
          echo "Updating dependencies..."
          npm update
          cd backend && npm update

      - name: Create security report
        run: |
          echo "Creating security report..."
          npm audit --json > security-report.json || echo "No security issues found"
          cd backend && npm audit --json > ../backend-security-report.json || echo "No backend security issues found"

      - name: Upload security reports
        uses: actions/upload-artifact@v4
        with:
          name: security-reports-${{ github.run_id }}
          path: |
            security-report.json
            backend-security-report.json

  backup:
    runs-on: ubuntu-latest
    if: github.event.inputs.task == 'all' || github.event.inputs.task == 'backup' || github.event_name == 'schedule'
    steps:
      - name: Backup staging database
        uses: appleboy/ssh-action@v1.0.3
        with:
          host: ${{ secrets.STAGING_DROPLET_IP }}
          username: ${{ secrets.STAGING_DROPLET_USER }}
          key: ${{ secrets.STAGING_SSH_PRIVATE_KEY }}
          script: |
            cd /opt/honey-shop
            mkdir -p backups
            docker exec honey_mongodb mongodump --out /data/backup/$(date +%Y%m%d_%H%M%S) || echo "Backup failed"
            echo "Staging backup completed"

      - name: Backup production database
        uses: appleboy/ssh-action@v1.0.3
        with:
          host: ${{ secrets.PRODUCTION_DROPLET_IP }}
          username: ${{ secrets.PRODUCTION_DROPLET_USER }}
          key: ${{ secrets.PRODUCTION_SSH_PRIVATE_KEY }}
          script: |
            cd /opt/honey-shop
            mkdir -p backups
            docker exec honey_mongodb mongodump --out /data/backup/$(date +%Y%m%d_%H%M%S) || echo "Backup failed"
            echo "Production backup completed"

      - name: Cleanup old backups
        uses: appleboy/ssh-action@v1.0.3
        with:
          host: ${{ secrets.STAGING_DROPLET_IP }}
          username: ${{ secrets.STAGING_DROPLET_USER }}
          key: ${{ secrets.STAGING_SSH_PRIVATE_KEY }}
          script: |
            cd /opt/honey-shop
            # Keep only last 7 days of backups
            find /data/backup -type d -mtime +7 -exec rm -rf {} \; || echo "No old backups to clean"

      - name: Cleanup old production backups
        uses: appleboy/ssh-action@v1.0.3
        with:
          host: ${{ secrets.PRODUCTION_DROPLET_IP }}
          username: ${{ secrets.PRODUCTION_DROPLET_USER }}
          key: ${{ secrets.PRODUCTION_SSH_PRIVATE_KEY }}
          script: |
            cd /opt/honey-shop
            # Keep only last 30 days of backups
            find /data/backup -type d -mtime +30 -exec rm -rf {} \; || echo "No old backups to clean"

  cleanup:
    runs-on: ubuntu-latest
    if: github.event.inputs.task == 'all' || github.event.inputs.task == 'cleanup' || github.event_name == 'schedule'
    steps:
      - name: Cleanup staging environment
        uses: appleboy/ssh-action@v1.0.3
        with:
          host: ${{ secrets.STAGING_DROPLET_IP }}
          username: ${{ secrets.STAGING_DROPLET_USER }}
          key: ${{ secrets.STAGING_SSH_PRIVATE_KEY }}
          script: |
            cd /opt/honey-shop
            echo "Cleaning up staging environment..."
            
            # Remove unused Docker images
            docker image prune -f
            
            # Remove unused Docker volumes
            docker volume prune -f
            
            # Remove unused Docker networks
            docker network prune -f
            
            # Clean up Docker system
            docker system prune -f
            
            # Clean up old log files
            find /var/log -name "*.log" -mtime +7 -delete || echo "No old logs to clean"
            
            echo "Staging cleanup completed"

      - name: Cleanup production environment
        uses: appleboy/ssh-action@v1.0.3
        with:
          host: ${{ secrets.PRODUCTION_DROPLET_IP }}
          username: ${{ secrets.PRODUCTION_DROPLET_USER }}
          key: ${{ secrets.PRODUCTION_SSH_PRIVATE_KEY }}
          script: |
            cd /opt/honey-shop
            echo "Cleaning up production environment..."
            
            # Remove unused Docker images (more conservative for production)
            docker image prune -f
            
            # Clean up Docker system (more conservative for production)
            docker system prune -f
            
            # Clean up old log files
            find /var/log -name "*.log" -mtime +30 -delete || echo "No old logs to clean"
            
            echo "Production cleanup completed"

  health-check:
    runs-on: ubuntu-latest
    if: github.event.inputs.task == 'all' || github.event.inputs.task == 'health-check' || github.event_name == 'schedule'
    steps:
      - name: Check staging health
        run: |
          echo "Checking staging environment health..."
          curl -f http://${{ secrets.STAGING_DROPLET_IP }}/health || echo "Staging health check failed"

      - name: Check production health
        run: |
          echo "Checking production environment health..."
          curl -f https://${{ secrets.PRODUCTION_DOMAIN }}/health || echo "Production health check failed"

      - name: Check staging services
        uses: appleboy/ssh-action@v1.0.3
        with:
          host: ${{ secrets.STAGING_DROPLET_IP }}
          username: ${{ secrets.STAGING_DROPLET_USER }}
          key: ${{ secrets.STAGING_SSH_PRIVATE_KEY }}
          script: |
            cd /opt/honey-shop
            echo "=== Staging Service Status ==="
            docker-compose ps
            
            echo -e "\n=== Staging Resource Usage ==="
            df -h
            free -h
            
            echo -e "\n=== Staging Recent Logs ==="
            docker-compose logs --tail=20

      - name: Check production services
        uses: appleboy/ssh-action@v1.0.3
        with:
          host: ${{ secrets.PRODUCTION_DROPLET_IP }}
          username: ${{ secrets.PRODUCTION_DROPLET_USER }}
          key: ${{ secrets.PRODUCTION_SSH_PRIVATE_KEY }}
          script: |
            cd /opt/honey-shop
            echo "=== Production Service Status ==="
            docker-compose ps
            
            echo -e "\n=== Production Resource Usage ==="
            df -h
            free -h
            
            echo -e "\n=== Production Recent Logs ==="
            docker-compose logs --tail=20

  system-updates:
    runs-on: ubuntu-latest
    if: github.event_name == 'schedule'
    steps:
      - name: Update staging system
        uses: appleboy/ssh-action@v1.0.3
        with:
          host: ${{ secrets.STAGING_DROPLET_IP }}
          username: ${{ secrets.STAGING_DROPLET_USER }}
          key: ${{ secrets.STAGING_SSH_PRIVATE_KEY }}
          script: |
            echo "Updating staging system..."
            apt update && apt upgrade -y
            echo "Staging system update completed"

      - name: Update production system
        uses: appleboy/ssh-action@v1.0.3
        with:
          host: ${{ secrets.PRODUCTION_DROPLET_IP }}
          username: ${{ secrets.PRODUCTION_DROPLET_USER }}
          key: ${{ secrets.PRODUCTION_SSH_PRIVATE_KEY }}
          script: |
            echo "Updating production system..."
            apt update && apt upgrade -y
            echo "Production system update completed"

  notify:
    runs-on: ubuntu-latest
    needs: [security-updates, backup, cleanup, health-check, system-updates]
    if: always()
    steps:
      - name: Notify on Success
        if: success()
        run: |
          echo "✅ Scheduled maintenance completed successfully!"
          echo "All tasks completed without errors."

      - name: Notify on Failure
        if: failure()
        run: |
          echo "❌ Scheduled maintenance failed!"
          echo "Some tasks encountered errors. Check the logs for details."
