name: Maintenance Tasks

on:
  schedule:
    # Run daily at 2 AM UTC
    - cron: '0 2 * * *'
  workflow_dispatch:
    inputs:
      task:
        description: 'Maintenance task to run'
        required: true
        default: 'all'
        type: choice
        options:
        - all
        - backup
        - cleanup
        - security-update
        - health-check

env:
  REGISTRY: ghcr.io
  IMAGE_NAME: ${{ github.repository }}

jobs:
  maintenance:
    runs-on: ubuntu-latest
    
    steps:
    - name: Checkout code
      uses: actions/checkout@v4

    - name: Set environment variables
      run: |
        echo "DROPLET_IP=${{ secrets.STAGING_DROPLET_IP }}" >> $GITHUB_ENV
        echo "DROPLET_USER=${{ secrets.STAGING_DROPLET_USER }}" >> $GITHUB_ENV
        echo "SSH_KEY=${{ secrets.STAGING_SSH_PRIVATE_KEY }}" >> $GITHUB_ENV
        echo "DOMAIN=$DROPLET_IP" >> $GITHUB_ENV
        echo "ENVIRONMENT=staging" >> $GITHUB_ENV

    - name: Create SSH key file
      run: |
        mkdir -p ~/.ssh
        echo "$SSH_KEY" > ~/.ssh/id_rsa
        chmod 600 ~/.ssh/id_rsa
        ssh-keyscan -H $DROPLET_IP >> ~/.ssh/known_hosts

    - name: Database Backup
      if: github.event.inputs.task == 'backup' || github.event.inputs.task == 'all' || github.event_name == 'schedule'
      run: |
        ssh -i ~/.ssh/id_rsa $DROPLET_USER@$DROPLET_IP << 'EOF'
          cd /opt/honey-shop
          
          # Create backup directory if it doesn't exist
          mkdir -p /opt/backups
          
          # Create timestamped backup
          BACKUP_FILE="/opt/backups/backup-$(date +%Y%m%d-%H%M%S).gz"
          
          if docker-compose ps | grep -q mongodb; then
            echo "Creating database backup..."
            docker-compose exec -T mongodb mongodump --archive --gzip > "$BACKUP_FILE"
            echo "Backup created: $BACKUP_FILE"
            
            # Keep only last 3 days of backups for staging
            find /opt/backups -name "backup-*.gz" -mtime +3 -delete
            echo "Old backups cleaned up"
          else
            echo "MongoDB container not running, skipping backup"
          fi
        EOF

    - name: System Cleanup
      if: github.event.inputs.task == 'cleanup' || github.event.inputs.task == 'all' || github.event_name == 'schedule'
      run: |
        ssh -i ~/.ssh/id_rsa $DROPLET_USER@$DROPLET_IP << 'EOF'
          cd /opt/honey-shop
          
          echo "Starting system cleanup..."
          
          # Remove unused Docker images
          docker image prune -f
          
          # Remove unused containers
          docker container prune -f
          
          # Remove unused volumes
          docker volume prune -f
          
          # Remove unused networks
          docker network prune -f
          
          # Clean up old logs
          find /var/log -name "*.log" -mtime +30 -delete 2>/dev/null || true
          
          # Clean up temporary files
          find /tmp -type f -mtime +7 -delete 2>/dev/null || true
          
          echo "System cleanup completed"
          
          # Show disk usage after cleanup
          echo "Disk usage after cleanup:"
          df -h
        EOF

    - name: Security Updates
      if: github.event.inputs.task == 'security-update' || github.event.inputs.task == 'all' || github.event_name == 'schedule'
      run: |
        ssh -i ~/.ssh/id_rsa $DROPLET_USER@$DROPLET_IP << 'EOF'
          echo "Checking for security updates..."
          
          # Update package lists
          apt-get update
          
          # Check for security updates
          SECURITY_UPDATES=$(apt list --upgradable 2>/dev/null | grep -c "security" || echo "0")
          
          if [ "$SECURITY_UPDATES" -gt 0 ]; then
            echo "Found $SECURITY_UPDATES security updates"
            echo "Security updates available:"
            apt list --upgradable 2>/dev/null | grep "security"
            
            # For production, we might want to be more careful
            if [ "${{ matrix.environment }}" = "production" ]; then
              echo "Production environment - manual review recommended"
            else
              echo "Installing security updates for staging..."
              apt-get upgrade -y --only-upgrade
            fi
          else
            echo "No security updates available"
          fi
        EOF

    - name: Health Check
      if: github.event.inputs.task == 'health-check' || github.event.inputs.task == 'all' || github.event_name == 'schedule'
      run: |
        ssh -i ~/.ssh/id_rsa $DROPLET_USER@$DROPLET_IP << 'EOF'
          cd /opt/honey-shop
          
          echo "Performing health check for ${{ matrix.environment }}..."
          
          # Check if services are running
          echo "=== Service Status ==="
          docker-compose ps
          
          # Check service health
          echo "=== Health Checks ==="
          
          # Frontend health check
          if curl -f -s http://localhost/health > /dev/null; then
            echo "✅ Frontend is healthy"
          else
            echo "❌ Frontend health check failed"
          fi
          
          # Backend health check
          if curl -f -s http://localhost:5001/health > /dev/null; then
            echo "✅ Backend is healthy"
          else
            echo "❌ Backend health check failed"
          fi
          
          # Database health check
          if docker-compose exec -T mongodb mongosh --eval "db.adminCommand('ping')" > /dev/null 2>&1; then
            echo "✅ Database is healthy"
          else
            echo "❌ Database health check failed"
          fi
          
          # System resources
          echo "=== System Resources ==="
          echo "Memory usage:"
          free -h
          
          echo "Disk usage:"
          df -h
          
          echo "Docker system usage:"
          docker system df
        EOF

    - name: Log Rotation
      if: github.event.inputs.task == 'all' || github.event_name == 'schedule'
      run: |
        ssh -i ~/.ssh/id_rsa $DROPLET_USER@$DROPLET_IP << 'EOF'
          cd /opt/honey-shop
          
          echo "Rotating application logs..."
          
          # Rotate Docker container logs
          docker-compose logs --tail=1000 > /opt/logs/app-$(date +%Y%m%d).log 2>/dev/null || true
          
          # Keep only last 30 days of logs
          find /opt/logs -name "app-*.log" -mtime +30 -delete 2>/dev/null || true
          
          echo "Log rotation completed"
        EOF

    - name: Update Dependencies
      if: github.event.inputs.task == 'all' || github.event_name == 'schedule'
      run: |
        ssh -i ~/.ssh/id_rsa $DROPLET_USER@$DROPLET_IP << 'EOF'
          cd /opt/honey-shop
          
          echo "Checking for Docker image updates..."
          
          # Pull latest base images
          docker pull mongo:6.0
          docker pull traefik:v2.10
          
          echo "Base images updated"
        EOF

    - name: Generate Maintenance Report
      if: always()
      run: |
        echo "## Maintenance Report - Staging" >> $GITHUB_STEP_SUMMARY
        echo "**Environment:** Staging" >> $GITHUB_STEP_SUMMARY
        echo "**Date:** $(date)" >> $GITHUB_STEP_SUMMARY
        echo "**Status:** ${{ job.status }}" >> $GITHUB_STEP_SUMMARY
        echo "" >> $GITHUB_STEP_SUMMARY
        
        if [ "${{ job.status }}" == "success" ]; then
          echo "✅ All maintenance tasks completed successfully" >> $GITHUB_STEP_SUMMARY
        else
          echo "❌ Some maintenance tasks failed" >> $GITHUB_STEP_SUMMARY
        fi